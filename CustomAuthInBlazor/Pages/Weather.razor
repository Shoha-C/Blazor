@page "/weather"
@using System.Security.Claims
@using CustomAuthInBlazor.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@attribute [Authorize]
@inject AuthenticationStateProvider StateProvider

<AuthorizeView Roles="admin">
    <Authorized>
        <PageTitle>Weather</PageTitle>

        <h1>Weather</h1>

        <h2 class="btn btn-danger"> Welcome @username </h2>
        <h3>@role</h3>
        <h3>@userId</h3>
        <p>This component demonstrates fetching data from the server.</p>

        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <h3 style=" color : red ">ACCESS DENIED!!!</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    private WeatherForecast[]? forecasts;

    string userId { get; set; }
    string username { get; set; }
    string role { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var stateProvider = (CustomAuthHandler)StateProvider;

        var state =
           await stateProvider.GetAuthenticationStateAsync();

        var user = state.User;

        userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)
            .Value;

        username = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)
            .Value;

        role = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)
            .Value;

        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
